name: build

on:
  push:
  pull_request:
  schedule:
    - cron: 0 1 * * 1
  workflow_dispatch:


jobs:
  fmt:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable
          components: rustfmt

      - name: Run fmt
        run: cargo fmt --all -- --check


  lint:
    runs-on: ${{ matrix.os }}
    needs: fmt

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        toolchain: [stable]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable
          components: clippy

      - name: Run cargo clippy
        run: cargo clippy --all-features --message-format=json -- -D warnings


  audit:
    runs-on: ubuntu-latest
    needs: fmt

    permissions:
      contents: read
      issues: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Audit Rust Dependencies
        uses: actions-rust-lang/audit@v1


  build:
    runs-on: ${{ matrix.os }}
    needs:
      - lint
      - audit

    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        toolchain: [stable]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable

      - name: Run build
        run: cargo build --all-features

  test:
    name: ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    needs: build

    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            toolchain: stable
            os: ubuntu-latest

          - target: x86_64-unknown-linux-musl
            toolchain: stable
            os: ubuntu-latest

    permissions:
      checks: write
      pull-requests: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: ${{ matrix.toolchain }}
          target: ${{ matrix.target }}

      - uses: taiki-e/install-action@v2
        with:
          tool: nextest

      - name: Run tests
        run: cargo nextest run --verbose --workspace --target ${{ matrix.target }} --all-features

      - name: Upload Test Results
        if: success() || failure()
        uses: actions/upload-artifact@v3
        with:
          name: Test Results (${{ matrix.target }})
          path: target/nextest/**/*.xml

      - name: Publish Test Results
        uses: EnricoMi/publish-unit-test-result-action@v2
        if: success() || failure()
        with:
          files: |
            target/nextest/**/*.xml


  publish-test-results:
    name: "Publish Tests Results"
    runs-on: ubuntu-latest
    needs: test
    if: success() || failure()

    permissions:
      checks: write
      pull-requests: write
      contents: read
      issues: read

    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts

      - name: Publish Test Results
        uses: EnricoMi/publish-unit-test-result-action@v2
        with:
          files: "artifacts/**/*.xml"


  doc:
    runs-on: ubuntu-latest
    needs: test

    env:
      MDBOOK_VERSION: 0.4.36

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable
          components: rustfmt

      - name: Install mdBook
        run: cargo install --version ${MDBOOK_VERSION} mdbook

      - name: Make the doc
        run: make doc

      - name: Make the book
        run: make book

      - name: Deploy the doc
        uses: actions/upload-artifact@v4
        with:
          name: doc
          path: target/doc

      - name: Deploy the book
        uses: actions/upload-artifact@v4
        with:
          name: book
          path: doc/book

      - name: Deploy GitHub pages
        if: github.ref == 'refs/heads/main'
        uses: actions/upload-pages-artifact@v3
        with:
          path: doc/book

  github-pages:
    runs-on: ubuntu-latest
    needs: doc
    if: github.ref == 'refs/heads/main'

    permissions:
      contents: read
      pages: write
      id-token: write

    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
      - name: Setup GitHub Pages
        id: pages
        uses: actions/configure-pages@v4

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
